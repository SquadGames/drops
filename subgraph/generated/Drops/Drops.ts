// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewClaim extends ethereum.Event {
  get params(): NewClaim__Params {
    return new NewClaim__Params(this);
  }
}

export class NewClaim__Params {
  _event: NewClaim;

  constructor(event: NewClaim) {
    this._event = event;
  }

  get dropIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get wrapped(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class NewDrop extends ethereum.Event {
  get params(): NewDrop__Params {
    return new NewDrop__Params(this);
  }
}

export class NewDrop__Params {
  _event: NewDrop;

  constructor(event: NewDrop) {
    this._event = event;
  }

  get dropRoot(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dropBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get dropTotal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dropIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewPayment extends ethereum.Event {
  get params(): NewPayment__Params {
    return new NewPayment__Params(this);
  }
}

export class NewPayment__Params {
  _event: NewPayment;

  constructor(event: NewPayment) {
    this._event = event;
  }

  get split(): string {
    return this._event.parameters[0].value.toString();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Drops extends ethereum.SmartContract {
  static bind(address: Address): Drops {
    return new Drops("Drops", address);
  }

  dropBlocks(param0: BigInt): BigInt {
    let result = super.call("dropBlocks", "dropBlocks(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_dropBlocks(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dropBlocks", "dropBlocks(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dropCount(): BigInt {
    let result = super.call("dropCount", "dropCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dropCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dropCount", "dropCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dropRoots(param0: BigInt): Bytes {
    let result = super.call("dropRoots", "dropRoots(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_dropRoots(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("dropRoots", "dropRoots(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isClaimed(dropIndex: BigInt, recipient: Address): boolean {
    let result = super.call("isClaimed", "isClaimed(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(dropIndex),
      ethereum.Value.fromAddress(recipient)
    ]);

    return result[0].toBoolean();
  }

  try_isClaimed(
    dropIndex: BigInt,
    recipient: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClaimed",
      "isClaimed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(dropIndex),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unclaimedEth(): BigInt {
    let result = super.call("unclaimedEth", "unclaimedEth():(uint256)", []);

    return result[0].toBigInt();
  }

  try_unclaimedEth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("unclaimedEth", "unclaimedEth():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get wethAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get dropIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class DropCall extends ethereum.Call {
  get inputs(): DropCall__Inputs {
    return new DropCall__Inputs(this);
  }

  get outputs(): DropCall__Outputs {
    return new DropCall__Outputs(this);
  }
}

export class DropCall__Inputs {
  _call: DropCall;

  constructor(call: DropCall) {
    this._call = call;
  }

  get dropRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get dropBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dropAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DropCall__Outputs {
  _call: DropCall;

  constructor(call: DropCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get split(): string {
    return this._call.inputValues[0].value.toString();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
